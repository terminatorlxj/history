type token =
  | Module
  | Model
  | Var
  | Define
  | Init
  | Transition
  | Fairness
  | Atomic
  | Spec
  | Int
  | Bool
  | Top
  | Bottom
  | AX
  | EX
  | AF
  | EG
  | AR
  | EU
  | Neg
  | Colon
  | Semicolon
  | Comma
  | Dot
  | LB1
  | RB1
  | LB2
  | RB2
  | LB3
  | RB3
  | And
  | Or
  | Equal
  | Assigno
  | Add
  | Minus
  | Mult
  | DotDot
  | Scalar
  | Nego
  | Ando
  | Oro
  | Non_equal
  | Mod
  | LT
  | GT
  | LE
  | GE
  | File_end
  | Id of (string)
  | I of (int)
  | B of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Lexing
open Term
open Formula
open Modul

(********helper varaiables and functions for the parser*********)
let tmp_parameter_list = ref [] 
let tmp_var_list = ref []
let tmp_symbol_tbl = ref (Hashtbl.create 10)
let tmp_init_assign = ref [] 
let tmp_transitions = ref []
let tmp_fairness = ref []
let tmp_atomic_tbl = ref (Hashtbl.create 5)
let tmp_spec_list = ref []

let clear_tmps () = 
	tmp_parameter_list := [];
	tmp_var_list := [];
	tmp_symbol_tbl := Hashtbl.create 10;
	tmp_init_assign := [];
	tmp_transitions := [];
	tmp_fairness := [];
	tmp_atomic_tbl := Hashtbl.create 5;
	tmp_spec_list := []

let tmp_state_var_list = ref []

let module_tbl = Hashtbl.create 5
let modl = ref {name="";
		parameter_list=[];
		var_list=[];
		symbol_tbl=Hashtbl.create 0;
		init_assign=[];
		transitions=[];
		fairness=[];
		atomic_tbl=Hashtbl.create 0;
		spec_list=[];}

let position_in_var_list v vl = 
  let rec position_from_start v1 vl1 i = 
    match vl1 with
    | [] -> -1
    | (s, e) :: vl1' -> if v1 = s then i else position_from_start v1 vl1' (i+1)
  in position_from_start v vl 0

let position_in_state_var_list sv svl = 
  let rec position_from_start v vl i = 
    match vl with
    | [] -> -1
    | s :: vl' -> if v = s then i else position_from_start v vl' (i+1)
  in position_from_start sv svl 0

(*******tmp function*******)
let rec str_str_list sl = 
	match sl with
	| [] -> ""
	| [s] -> s
	| s :: sl' -> s^","^(str_str_list sl')

(**************************)


let rec find_scalar_position sc vtl = 
  let rec find_str_position s sl i = 
    match sl with
    | [] -> -1
    | s' :: sl' -> if s = s' then i else find_str_position s sl' (i+1) in 
  match vtl with
  | [] -> -1	
  | (s, Scalar_type sl) :: vtl' -> 
     let i1 = find_str_position sc sl 0 in 
     begin
		(*print_endline ("finding the position of "^sc^" in "^(str_str_list sl)^" and result is "^(string_of_int i1));*)
       if i1 = -1 then find_scalar_position sc vtl'
       else i1
     end
  | (s, et) :: vtl' -> find_scalar_position sc vtl'

let rec check_current_symbols stbl = 
  let tmp_s = ref "" in 
  let rec check_symbol s = 
    try
      match s with
      | Const i -> true
(*      | Parameter p -> true*)
      | Var v -> true
(*      | Symbol s1 -> Hashtbl.mem stbl s1*)
			| Vars s1 -> Hashtbl.mem stbl s1
      | Add (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negi e1 -> check_symbol e1
      | Minus (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Mult (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negb e1 -> check_symbol e1
      | Ando (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Oro (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Equal (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | _ -> false
    with
      Not_found -> false in
  Hashtbl.iter
    (fun a b -> if (!tmp_s = "") then (if not (check_symbol b) then tmp_s := a)) 
    stbl;
  !tmp_s
(***************************************************************)
let parse_error s = print_endline s
# 164 "parser.ml"
let yytransl_const = [|
  257 (* Module *);
  258 (* Model *);
  259 (* Var *);
  260 (* Define *);
  261 (* Init *);
  262 (* Transition *);
  263 (* Fairness *);
  264 (* Atomic *);
  265 (* Spec *);
  266 (* Int *);
  267 (* Bool *);
  268 (* Top *);
  269 (* Bottom *);
  270 (* AX *);
  271 (* EX *);
  272 (* AF *);
  273 (* EG *);
  274 (* AR *);
  275 (* EU *);
  276 (* Neg *);
  277 (* Colon *);
  278 (* Semicolon *);
  279 (* Comma *);
  280 (* Dot *);
  281 (* LB1 *);
  282 (* RB1 *);
  283 (* LB2 *);
  284 (* RB2 *);
  285 (* LB3 *);
  286 (* RB3 *);
  287 (* And *);
  288 (* Or *);
  289 (* Equal *);
  290 (* Assigno *);
  291 (* Add *);
  292 (* Minus *);
  293 (* Mult *);
  294 (* DotDot *);
  295 (* Scalar *);
  296 (* Nego *);
  297 (* Ando *);
  298 (* Oro *);
  299 (* Non_equal *);
  300 (* Mod *);
  301 (* LT *);
  302 (* GT *);
  303 (* LE *);
  304 (* GE *);
  305 (* File_end *);
    0|]

let yytransl_block = [|
  306 (* Id *);
  307 (* I *);
  308 (* B *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\011\000\011\000\011\000\011\000\012\000\
\012\000\012\000\004\000\013\000\013\000\013\000\007\000\015\000\
\015\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\017\000\017\000\
\017\000\017\000\017\000\017\000\005\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\019\000\019\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\021\000\021\000\021\000\
\021\000\021\000\021\000\006\000\022\000\022\000\023\000\023\000\
\023\000\010\000\024\000\024\000\008\000\026\000\026\000\027\000\
\028\000\028\000\028\000\009\000\029\000\029\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\030\000\030\000\000\000"

let yylen = "\002\000\
\002\000\000\000\011\000\012\000\013\000\014\000\014\000\015\000\
\000\000\003\000\005\000\005\000\001\000\003\000\001\000\000\000\
\002\000\004\000\004\000\000\000\005\000\008\000\004\000\000\000\
\005\000\001\000\001\000\001\000\004\000\001\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\006\000\009\000\003\000\006\000\004\000\000\000\005\000\007\000\
\007\000\008\000\008\000\007\000\003\000\003\000\001\000\001\000\
\004\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\001\000\004\000\001\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\006\000\006\000\
\009\000\003\000\006\000\004\000\000\000\007\000\000\000\005\000\
\008\000\004\000\000\000\003\000\004\000\000\000\008\000\001\000\
\000\000\001\000\003\000\004\000\000\000\005\000\001\000\001\000\
\004\000\003\000\004\000\002\000\003\000\003\000\008\000\008\000\
\008\000\008\000\012\000\012\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\144\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\018\000\000\000\
\019\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\081\000\082\000\000\000\085\000\
\000\000\004\000\118\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\027\000\000\000\030\000\000\000\000\000\000\000\000\000\
\101\000\000\000\106\000\000\000\000\000\089\000\000\000\000\000\
\000\000\000\000\000\000\090\000\096\000\097\000\098\000\099\000\
\100\000\117\000\000\000\127\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\006\000\000\000\000\000\000\000\000\000\
\031\000\033\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\132\000\000\000\000\000\114\000\000\000\
\000\000\000\000\000\000\124\000\008\000\000\000\046\000\000\000\
\051\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\035\000\041\000\042\000\043\000\044\000\045\000\000\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\120\000\000\000\000\000\000\000\
\000\000\000\000\000\000\141\000\130\000\000\000\000\000\116\000\
\133\000\000\000\000\000\022\000\000\000\000\000\057\000\056\000\
\060\000\000\000\000\000\000\000\000\000\107\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\131\000\129\000\000\000\000\000\000\000\059\000\
\058\000\000\000\000\000\000\000\110\000\123\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\143\000\126\000\
\000\000\000\000\052\000\000\000\000\000\112\000\000\000\000\000\
\000\000\000\000\063\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\000\000\119\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\080\000\
\000\000\068\000\000\000\000\000\000\000\000\000\000\000\069\000\
\075\000\076\000\077\000\078\000\079\000\135\000\136\000\137\000\
\138\000\000\000\000\000\000\000\113\000\065\000\000\000\000\000\
\000\000\000\000\000\000\000\000\139\000\140\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\030\000\039\000\050\000\040\000\065\000\
\086\000\087\000\022\000\027\000\046\000\079\000\058\000\131\000\
\132\000\060\000\134\000\069\001\080\000\081\000\204\000\167\000\
\168\000\115\000\252\000\253\000\170\000\007\001"

let yysindex = "\054\000\
\000\000\000\000\000\000\014\255\235\254\046\255\000\000\073\255\
\096\255\097\255\097\255\127\255\148\255\159\255\255\254\157\255\
\164\255\000\000\118\255\168\255\000\000\200\255\202\255\202\255\
\171\255\188\255\212\255\097\255\216\255\110\255\110\255\192\255\
\227\255\000\000\000\000\206\255\223\255\238\255\010\000\012\000\
\010\000\012\000\249\255\168\255\009\000\001\000\000\000\250\255\
\003\000\015\000\010\000\039\000\010\000\000\000\000\000\255\254\
\000\000\001\255\024\000\042\000\100\255\000\000\043\000\046\000\
\083\255\039\000\247\254\000\000\063\000\066\255\000\000\100\255\
\100\255\004\000\100\255\117\255\000\000\000\000\065\000\000\000\
\052\000\000\000\000\000\070\000\076\000\085\000\107\000\083\255\
\206\255\100\255\095\000\100\255\143\255\022\001\193\001\201\003\
\000\000\000\000\071\000\100\255\093\000\100\255\100\255\100\255\
\100\255\100\255\100\255\100\255\100\255\100\255\100\255\100\255\
\100\255\000\000\116\255\069\255\074\000\000\000\096\000\112\000\
\107\000\000\000\120\002\095\000\095\000\077\000\095\000\253\255\
\000\000\000\000\038\001\000\000\128\001\113\000\078\000\250\255\
\000\000\255\255\000\000\141\002\087\000\000\000\201\003\201\003\
\109\001\153\003\105\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\000\000\000\000\000\134\000\136\000\140\000\
\152\000\153\000\156\000\069\255\069\255\158\000\149\000\026\255\
\151\000\164\000\000\000\000\000\174\000\166\000\216\001\217\003\
\000\000\000\000\155\000\095\000\000\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\100\255\184\000\186\000\190\000\154\001\160\000\000\000\
\100\255\189\000\074\255\180\000\165\000\171\000\182\000\183\000\
\185\000\192\000\196\000\000\000\106\255\253\254\000\000\069\255\
\069\255\069\255\069\255\000\000\000\000\206\255\000\000\025\000\
\000\000\162\002\000\000\217\003\217\003\177\001\169\003\121\003\
\000\000\000\000\000\000\000\000\000\000\000\000\170\001\000\000\
\250\255\250\255\250\255\209\000\215\000\183\002\197\000\100\255\
\100\255\216\000\217\000\213\000\000\000\225\000\236\000\237\000\
\239\000\241\000\242\000\000\000\000\000\180\255\232\000\000\000\
\000\000\238\000\182\255\000\000\095\000\243\000\000\000\000\000\
\000\000\250\255\250\255\189\000\053\000\000\000\204\002\054\001\
\100\255\165\000\240\000\069\255\069\255\069\255\069\255\223\000\
\244\000\246\000\000\000\000\000\074\000\225\002\251\000\000\000\
\000\000\100\255\252\000\087\000\000\000\000\000\100\000\250\254\
\226\255\028\000\056\000\008\001\010\001\012\001\000\000\000\000\
\243\000\117\000\000\000\246\002\100\255\000\000\100\000\100\000\
\100\000\250\000\000\000\000\000\070\001\011\001\027\001\028\001\
\043\001\069\255\069\255\095\000\189\000\086\001\239\001\233\003\
\000\000\100\255\000\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\003\001\
\020\001\030\001\036\001\125\000\135\000\011\003\087\000\000\000\
\006\002\000\000\233\003\233\003\200\001\185\003\137\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\255\069\255\243\000\000\000\000\000\161\000\188\000\
\044\001\059\001\046\001\062\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\078\001\078\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\001\000\000\084\001\000\000\000\000\
\000\000\000\000\000\000\078\001\000\000\000\000\000\000\000\000\
\090\001\000\000\000\000\095\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\001\000\000\000\000\000\000\096\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\154\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\095\001\000\000\000\000\000\000\102\001\000\000\000\000\051\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\110\001\111\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\096\001\
\000\000\189\255\000\000\000\000\129\001\000\000\068\002\085\002\
\034\002\102\002\112\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\218\255\000\000\000\000\134\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\110\001\
\000\000\000\000\000\000\000\000\000\000\095\001\000\000\154\000\
\000\000\000\000\000\000\059\003\062\003\038\003\071\255\166\255\
\000\000\000\000\000\000\000\000\000\000\000\000\024\255\000\000\
\096\001\096\001\096\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\136\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\030\255\000\000\000\000\000\000\181\000\000\000\000\000\
\000\000\096\001\096\001\248\255\020\000\000\000\000\000\000\000\
\106\001\134\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\111\001\000\000\000\000\000\000\
\000\000\000\000\000\000\129\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\140\001\000\000\000\000\
\208\000\235\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\129\001\000\000\
\000\000\000\000\087\003\095\003\070\003\081\255\078\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\016\000\242\001\187\000\130\000\005\002\101\002\
\214\255\080\002\122\002\135\002\179\255\186\255\000\000\140\255\
\091\255\124\255\142\255\070\255\158\255\156\001\231\254\222\001\
\098\255\000\000\000\000\157\001\147\001\151\001"

let yytablesize = 1305
let yytable = "\094\000\
\139\000\095\000\096\000\200\000\098\000\212\000\213\000\175\000\
\176\000\018\000\178\000\122\000\089\000\225\000\005\000\006\000\
\070\001\090\000\062\001\123\000\199\000\133\000\005\001\019\000\
\217\000\218\000\014\000\020\000\008\000\140\000\068\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\150\000\
\151\000\152\000\153\000\035\000\119\000\120\000\006\001\216\000\
\021\000\061\000\069\000\134\000\134\000\061\000\001\000\134\000\
\217\000\218\000\009\001\010\001\011\001\134\000\007\000\226\000\
\198\000\227\000\228\000\229\000\230\000\231\000\232\000\233\000\
\234\000\235\000\236\000\237\000\238\000\125\001\173\000\240\000\
\156\000\157\000\158\000\159\000\160\000\161\000\162\000\163\000\
\164\000\084\000\072\000\085\000\036\000\165\000\092\000\009\000\
\036\000\010\000\036\000\071\000\248\000\073\000\070\000\071\000\
\074\000\075\000\070\000\249\000\015\001\016\001\017\001\036\000\
\036\000\037\000\038\000\093\000\077\000\078\000\166\000\071\000\
\011\000\070\000\070\000\239\000\072\000\048\001\049\001\050\001\
\051\001\059\001\246\000\004\001\079\001\080\001\081\001\073\000\
\217\000\218\000\074\000\075\000\099\000\040\001\041\001\100\000\
\012\001\154\000\012\000\015\000\022\001\076\000\077\000\078\000\
\038\001\106\001\107\001\108\001\109\001\110\001\111\001\112\001\
\113\001\114\001\115\001\116\001\117\001\155\000\099\000\135\000\
\025\000\100\000\052\000\100\001\101\001\016\000\083\000\083\000\
\083\000\023\001\024\001\083\000\063\000\083\000\066\000\083\000\
\017\000\023\000\083\000\037\000\083\000\083\000\083\000\037\000\
\024\000\037\000\083\000\083\000\083\000\083\000\083\000\083\000\
\083\000\083\000\034\001\037\001\029\000\035\001\026\000\037\000\
\032\000\102\000\102\000\102\000\217\000\218\000\102\000\102\001\
\102\000\041\000\102\000\127\001\128\001\102\000\028\000\102\000\
\102\000\102\000\051\000\060\001\053\000\102\000\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\033\000\084\000\084\000\
\084\000\034\000\043\000\084\000\036\000\084\000\078\001\084\000\
\071\001\044\000\084\000\047\000\084\000\084\000\084\000\045\000\
\217\000\218\000\084\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\048\000\105\001\104\000\104\000\104\000\049\000\
\038\000\104\000\054\000\104\000\179\000\104\000\099\000\180\000\
\104\000\201\000\104\000\104\000\104\000\056\000\057\000\061\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\103\000\103\000\103\000\059\000\062\000\103\000\064\000\103\000\
\179\000\103\000\072\001\013\001\103\000\097\000\103\000\103\000\
\103\000\070\000\217\000\218\000\103\000\103\000\103\000\103\000\
\103\000\103\000\103\000\103\000\105\000\105\000\105\000\071\000\
\082\000\105\000\083\000\105\000\099\000\105\000\073\001\042\001\
\105\000\114\000\105\000\105\000\105\000\101\000\217\000\218\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\091\000\102\000\116\000\103\000\104\000\105\000\072\000\197\000\
\117\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\073\000\118\000\085\000\074\000\075\000\066\000\124\000\
\138\000\141\000\066\000\169\000\063\001\171\000\177\000\076\000\
\077\000\078\000\125\000\066\000\066\000\126\000\127\000\064\001\
\203\000\066\000\066\000\065\001\179\000\172\000\196\000\076\001\
\128\000\129\000\130\000\122\001\028\000\066\001\067\001\068\001\
\028\000\205\000\028\000\217\000\218\000\123\001\206\000\028\000\
\207\000\028\000\028\000\028\000\208\000\217\000\218\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\047\000\
\209\000\210\000\215\000\047\000\211\000\047\000\214\000\129\001\
\219\000\245\000\047\000\222\000\047\000\047\000\047\000\217\000\
\218\000\220\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\029\000\221\000\224\000\241\000\029\000\242\000\
\029\000\250\000\130\001\243\000\247\000\029\000\251\000\029\000\
\029\000\029\000\217\000\218\000\254\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\049\000\018\001\255\000\
\000\001\049\000\001\001\049\000\019\001\025\001\027\001\026\001\
\049\000\002\001\049\000\049\000\049\000\003\001\021\001\028\001\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\048\000\036\001\029\001\030\001\048\000\031\001\048\000\032\001\
\033\001\031\000\039\001\048\000\217\000\048\000\048\000\048\000\
\052\001\047\001\082\001\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\050\000\118\001\061\001\074\001\050\000\
\075\001\050\000\034\001\042\000\016\000\053\001\050\000\054\001\
\050\000\050\000\050\000\136\000\058\001\119\001\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\102\000\120\001\
\103\000\104\000\105\000\181\000\096\001\121\001\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\182\000\133\001\
\183\000\184\000\185\000\044\001\097\001\098\001\186\000\187\000\
\188\000\189\000\190\000\191\000\192\000\193\000\102\000\134\001\
\103\000\104\000\105\000\083\001\099\001\131\001\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\084\001\009\000\
\085\001\086\001\087\001\103\001\132\001\010\000\088\001\089\001\
\090\001\091\001\092\001\093\001\094\001\095\001\102\000\017\000\
\103\000\104\000\105\000\083\000\020\000\054\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\083\000\109\000\
\083\000\083\000\083\000\115\000\125\000\102\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\194\000\108\000\
\109\000\110\000\111\000\112\000\113\000\195\000\111\000\121\000\
\102\000\122\000\103\000\104\000\105\000\142\000\088\000\121\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\194\000\067\000\055\000\244\000\045\001\008\001\046\001\056\001\
\055\001\000\000\102\000\000\000\103\000\104\000\105\000\000\000\
\194\000\000\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\102\000\000\000\103\000\104\000\105\000\000\000\
\000\000\182\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\137\000\188\000\189\000\190\000\191\000\192\000\
\193\000\102\000\000\000\103\000\104\000\105\000\000\000\000\000\
\084\001\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\223\000\090\001\091\001\092\001\093\001\094\001\095\001\
\182\000\000\000\183\000\184\000\185\000\000\000\000\000\000\000\
\186\000\187\000\188\000\189\000\190\000\191\000\192\000\193\000\
\104\001\000\000\000\000\000\000\000\000\000\000\000\000\084\001\
\000\000\085\001\086\001\087\001\000\000\000\000\000\000\088\001\
\089\001\090\001\091\001\092\001\093\001\094\001\095\001\126\001\
\000\000\000\000\000\000\000\000\000\000\000\000\102\000\000\000\
\103\000\104\000\105\000\000\000\000\000\000\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\095\000\095\000\
\095\000\000\000\000\000\095\000\000\000\095\000\000\000\095\000\
\000\000\000\000\000\000\000\000\095\000\095\000\095\000\087\000\
\087\000\087\000\095\000\095\000\087\000\000\000\087\000\000\000\
\087\000\000\000\000\000\000\000\000\000\087\000\087\000\000\000\
\093\000\093\000\093\000\087\000\087\000\093\000\000\000\093\000\
\000\000\093\000\000\000\000\000\000\000\000\000\093\000\093\000\
\000\000\094\000\094\000\094\000\093\000\093\000\094\000\000\000\
\094\000\000\000\094\000\000\000\000\000\000\000\000\000\094\000\
\094\000\000\000\091\000\091\000\091\000\094\000\094\000\091\000\
\000\000\091\000\000\000\091\000\092\000\092\000\092\000\000\000\
\000\000\092\000\000\000\092\000\000\000\092\000\091\000\091\000\
\000\000\000\000\000\000\174\000\000\000\000\000\000\000\000\000\
\102\000\092\000\103\000\104\000\105\000\000\000\000\000\000\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\202\000\000\000\000\000\000\000\000\000\102\000\000\000\103\000\
\104\000\105\000\000\000\000\000\000\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\014\001\000\000\000\000\
\000\000\000\000\182\000\000\000\183\000\184\000\185\000\000\000\
\000\000\000\000\186\000\187\000\188\000\189\000\190\000\191\000\
\192\000\193\000\020\001\000\000\000\000\000\000\000\000\102\000\
\000\000\103\000\104\000\105\000\000\000\000\000\000\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\043\001\
\000\000\000\000\000\000\000\000\102\000\000\000\103\000\104\000\
\105\000\000\000\000\000\000\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\057\001\000\000\000\000\000\000\
\000\000\182\000\000\000\183\000\184\000\185\000\000\000\000\000\
\000\000\186\000\187\000\188\000\189\000\190\000\191\000\192\000\
\193\000\077\001\000\000\000\000\000\000\000\000\102\000\000\000\
\103\000\104\000\105\000\000\000\000\000\000\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\124\001\000\000\
\000\000\000\000\000\000\182\000\000\000\183\000\184\000\185\000\
\000\000\000\000\000\000\186\000\187\000\188\000\189\000\190\000\
\191\000\192\000\193\000\040\000\000\000\000\000\032\000\040\000\
\000\000\040\000\032\000\000\000\032\000\000\000\000\000\000\000\
\040\000\040\000\040\000\032\000\032\000\000\000\040\000\040\000\
\038\000\032\000\032\000\039\000\038\000\000\000\038\000\039\000\
\000\000\039\000\000\000\074\000\000\000\038\000\038\000\074\000\
\039\000\039\000\000\000\038\000\038\000\000\000\039\000\039\000\
\074\000\074\000\074\000\000\000\072\000\000\000\074\000\074\000\
\072\000\000\000\000\000\000\000\073\000\000\000\000\000\000\000\
\073\000\072\000\072\000\000\000\000\000\000\000\000\000\072\000\
\072\000\073\000\073\000\000\000\000\000\000\000\000\000\073\000\
\073\000\102\000\000\000\103\000\104\000\105\000\000\000\000\000\
\000\000\106\000\000\000\108\000\109\000\110\000\111\000\112\000\
\113\000\182\000\000\000\183\000\184\000\185\000\000\000\000\000\
\000\000\186\000\000\000\188\000\189\000\190\000\191\000\192\000\
\193\000\084\001\000\000\085\001\086\001\087\001\000\000\000\000\
\000\000\088\001\000\000\090\001\091\001\092\001\093\001\094\001\
\095\001\102\000\000\000\103\000\104\000\105\000\000\000\000\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\112\000\
\113\000\182\000\000\000\183\000\184\000\185\000\000\000\000\000\
\000\000\000\000\000\000\188\000\189\000\190\000\191\000\192\000\
\193\000\084\001\000\000\085\001\086\001\087\001\000\000\000\000\
\000\000\000\000\000\000\090\001\091\001\092\001\093\001\094\001\
\095\001\102\000\000\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\108\000\109\000\110\000\111\000\112\000\
\113\000\182\000\000\000\000\000\000\000\185\000\000\000\000\000\
\000\000\000\000\000\000\188\000\189\000\190\000\191\000\192\000\
\193\000\084\001\000\000\000\000\000\000\087\001\000\000\000\000\
\000\000\000\000\000\000\090\001\091\001\092\001\093\001\094\001\
\095\001"

let yycheck = "\070\000\
\099\000\072\000\073\000\136\000\075\000\164\000\165\000\124\000\
\125\000\011\001\127\000\089\000\022\001\179\000\001\001\002\001\
\023\001\027\001\044\001\090\000\135\000\092\000\026\001\025\001\
\031\001\032\001\011\000\029\001\050\001\100\000\030\001\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\028\000\087\000\088\000\050\001\022\001\
\050\001\026\001\050\001\022\001\023\001\030\001\001\000\026\001\
\031\001\032\001\217\000\218\000\219\000\032\001\049\001\180\000\
\135\000\182\000\183\000\184\000\185\000\186\000\187\000\188\000\
\189\000\190\000\191\000\192\000\193\000\103\001\121\000\194\000\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\007\001\025\001\009\001\022\001\025\001\029\001\050\001\
\026\001\025\001\028\001\022\001\027\001\036\001\022\001\026\001\
\039\001\040\001\026\001\034\001\241\000\242\000\243\000\041\001\
\042\001\004\001\005\001\050\001\051\001\052\001\050\001\042\001\
\025\001\041\001\042\001\194\000\025\001\028\001\029\001\030\001\
\031\001\039\001\201\000\026\001\063\001\064\001\065\001\036\001\
\031\001\032\001\039\001\040\001\024\001\018\001\019\001\027\001\
\222\000\030\001\050\001\021\001\247\000\050\001\051\001\052\001\
\013\001\084\001\085\001\086\001\087\001\088\001\089\001\090\001\
\091\001\092\001\093\001\094\001\095\001\050\001\024\001\025\001\
\051\001\027\001\041\000\074\001\075\001\026\001\021\001\022\001\
\023\001\248\000\249\000\026\001\051\000\028\001\053\000\030\001\
\026\001\029\001\033\001\022\001\035\001\036\001\037\001\026\001\
\029\001\028\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\023\001\022\001\003\001\026\001\039\001\042\001\
\038\001\021\001\022\001\023\001\031\001\032\001\026\001\076\001\
\028\001\031\000\030\001\122\001\123\001\033\001\023\001\035\001\
\036\001\037\001\040\000\042\001\042\000\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\050\001\021\001\022\001\
\023\001\030\001\051\001\026\001\029\001\028\001\061\001\030\001\
\023\001\023\001\033\001\029\001\035\001\036\001\037\001\050\001\
\031\001\032\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\029\001\082\001\021\001\022\001\023\001\006\001\
\005\001\026\001\026\001\028\001\024\001\030\001\024\001\027\001\
\033\001\027\001\035\001\036\001\037\001\021\001\030\001\029\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\021\001\022\001\023\001\050\001\030\001\026\001\008\001\028\001\
\024\001\030\001\023\001\027\001\033\001\050\001\035\001\036\001\
\037\001\034\001\031\001\032\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\021\001\022\001\023\001\030\001\
\030\001\026\001\029\001\028\001\024\001\030\001\023\001\027\001\
\033\001\030\001\035\001\036\001\037\001\021\001\031\001\032\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\034\001\033\001\029\001\035\001\036\001\037\001\025\001\026\001\
\029\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\036\001\030\001\009\001\039\001\040\001\022\001\025\001\
\050\001\029\001\026\001\050\001\025\001\030\001\050\001\050\001\
\051\001\052\001\036\001\035\001\036\001\039\001\040\001\036\001\
\050\001\041\001\042\001\040\001\024\001\030\001\030\001\027\001\
\050\001\051\001\052\001\023\001\022\001\050\001\051\001\052\001\
\026\001\025\001\028\001\031\001\032\001\023\001\025\001\033\001\
\025\001\035\001\036\001\037\001\025\001\031\001\032\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\022\001\
\025\001\025\001\030\001\026\001\025\001\028\001\025\001\023\001\
\034\001\026\001\033\001\022\001\035\001\036\001\037\001\031\001\
\032\001\030\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\022\001\030\001\050\001\022\001\026\001\022\001\
\028\001\030\001\023\001\022\001\024\001\033\001\050\001\035\001\
\036\001\037\001\031\001\032\001\050\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\022\001\022\001\050\001\
\050\001\026\001\050\001\028\001\022\001\022\001\026\001\023\001\
\033\001\050\001\035\001\036\001\037\001\050\001\050\001\023\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\022\001\026\001\023\001\023\001\026\001\023\001\028\001\023\001\
\023\001\024\000\024\001\033\001\031\001\035\001\036\001\037\001\
\050\001\034\001\025\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\022\001\026\001\034\001\023\001\026\001\
\023\001\028\001\023\001\031\000\030\001\050\001\033\001\050\001\
\035\001\036\001\037\001\022\001\050\001\026\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\033\001\026\001\
\035\001\036\001\037\001\022\001\050\001\026\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\033\001\026\001\
\035\001\036\001\037\001\022\001\050\001\050\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\033\001\026\001\
\035\001\036\001\037\001\022\001\050\001\050\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\033\001\026\001\
\035\001\036\001\037\001\022\001\050\001\026\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\033\001\030\001\
\035\001\036\001\037\001\022\001\030\001\030\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\033\001\030\001\
\035\001\036\001\037\001\030\001\030\001\033\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\023\001\043\001\
\044\001\045\001\046\001\047\001\048\001\030\001\030\001\026\001\
\033\001\026\001\035\001\036\001\037\001\026\001\066\000\088\000\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\023\001\056\000\044\000\026\001\025\001\216\000\026\001\037\001\
\034\001\255\255\033\001\255\255\035\001\036\001\037\001\255\255\
\023\001\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\033\001\255\255\035\001\036\001\037\001\255\255\
\255\255\033\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\026\001\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\033\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\026\001\043\001\044\001\045\001\046\001\047\001\048\001\
\033\001\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\021\001\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\021\001\
\022\001\023\001\041\001\042\001\026\001\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\255\255\
\021\001\022\001\023\001\041\001\042\001\026\001\255\255\028\001\
\255\255\030\001\255\255\255\255\255\255\255\255\035\001\036\001\
\255\255\021\001\022\001\023\001\041\001\042\001\026\001\255\255\
\028\001\255\255\030\001\255\255\255\255\255\255\255\255\035\001\
\036\001\255\255\021\001\022\001\023\001\041\001\042\001\026\001\
\255\255\028\001\255\255\030\001\021\001\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\030\001\041\001\042\001\
\255\255\255\255\255\255\028\001\255\255\255\255\255\255\255\255\
\033\001\042\001\035\001\036\001\037\001\255\255\255\255\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\028\001\255\255\255\255\255\255\255\255\033\001\255\255\035\001\
\036\001\037\001\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\028\001\255\255\255\255\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\028\001\255\255\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\028\001\
\255\255\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\028\001\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\028\001\255\255\255\255\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\028\001\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\022\001\255\255\255\255\022\001\026\001\
\255\255\028\001\026\001\255\255\028\001\255\255\255\255\255\255\
\035\001\036\001\037\001\035\001\036\001\255\255\041\001\042\001\
\022\001\041\001\042\001\022\001\026\001\255\255\028\001\026\001\
\255\255\028\001\255\255\022\001\255\255\035\001\036\001\026\001\
\035\001\036\001\255\255\041\001\042\001\255\255\041\001\042\001\
\035\001\036\001\037\001\255\255\022\001\255\255\041\001\042\001\
\026\001\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\026\001\035\001\036\001\255\255\255\255\255\255\255\255\041\001\
\042\001\035\001\036\001\255\255\255\255\255\255\255\255\041\001\
\042\001\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\033\001\255\255\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001"

let yynames_const = "\
  Module\000\
  Model\000\
  Var\000\
  Define\000\
  Init\000\
  Transition\000\
  Fairness\000\
  Atomic\000\
  Spec\000\
  Int\000\
  Bool\000\
  Top\000\
  Bottom\000\
  AX\000\
  EX\000\
  AF\000\
  EG\000\
  AR\000\
  EU\000\
  Neg\000\
  Colon\000\
  Semicolon\000\
  Comma\000\
  Dot\000\
  LB1\000\
  RB1\000\
  LB2\000\
  RB2\000\
  LB3\000\
  RB3\000\
  And\000\
  Or\000\
  Equal\000\
  Assigno\000\
  Add\000\
  Minus\000\
  Mult\000\
  DotDot\000\
  Scalar\000\
  Nego\000\
  Ando\000\
  Oro\000\
  Non_equal\000\
  Mod\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  File_end\000\
  "

let yynames_block = "\
  Id\000\
  I\000\
  B\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inputs) in
    Obj.repr(
# 135 "parser.mly"
                       ((module_tbl, !modl))
# 826 "parser.ml"
               : (((string, Modul.modul0) Hashtbl.t) * Modul.modul0)))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                     ()
# 832 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 141 "parser.mly"
       (tmp_parameter_list := _5; 
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = Hashtbl.create 0;
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions; 
	   fairness = [];
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  };
	clear_tmps ())
# 856 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 11 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 155 "parser.mly"
       (tmp_parameter_list := _5;
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = !tmp_symbol_tbl; 
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions;
	   fairness = [];
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  }; 
	clear_tmps ())
# 881 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 12 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 8 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 169 "parser.mly"
       (tmp_parameter_list := _5; 
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list;
		 symbol_tbl = Hashtbl.create 0;
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions;
		 fairness = [];
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 906 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 182 "parser.mly"
       (tmp_parameter_list := _5;
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list; 
		 symbol_tbl = !tmp_symbol_tbl; 
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions; 
		 fairness = [];
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 932 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'trans_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'atomic_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'fairness_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 195 "parser.mly"
       (tmp_parameter_list := _5; 
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list;
		 symbol_tbl = Hashtbl.create 0;
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions;
		 fairness = !tmp_fairness;
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 958 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 14 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 10 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 7 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 5 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : 'trans_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 3 : 'atomic_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 2 : 'fairness_decl) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 208 "parser.mly"
       (tmp_parameter_list := _5;
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list; 
		 symbol_tbl = !tmp_symbol_tbl; 
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions; 
		 fairness = !tmp_fairness;
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 985 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "parser.mly"
                    ([])
# 991 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type) in
    Obj.repr(
# 224 "parser.mly"
                        ([(_1, _3)])
# 999 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 225 "parser.mly"
                                         ((_1, _3)::_5)
# 1008 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 229 "parser.mly"
                        (Int_type (_2, _4))
# 1016 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 230 "parser.mly"
          (Bool_type)
# 1022 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'scalars) in
    Obj.repr(
# 231 "parser.mly"
                     (Scalar_type _2)
# 1029 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 233 "parser.mly"
       (try
	  (let m = Hashtbl.find module_tbl _1 in (Module_type m.name))
	 with Not_found -> (print_endline ("module "^(_1)^" is not defined."); exit 1))
# 1038 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser.mly"
     ([])
# 1044 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 240 "parser.mly"
               ([_2])
# 1051 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'scalars) in
    Obj.repr(
# 241 "parser.mly"
                             (_2 :: _4)
# 1059 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    Obj.repr(
# 244 "parser.mly"
                           (tmp_var_list := _3)
# 1066 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "parser.mly"
       ([])
# 1072 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 248 "parser.mly"
                                     ((_1, _3)::_5)
# 1081 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 249 "parser.mly"
                                                 ((_1, Array_type (_3, _5)) :: _8)
# 1091 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'symbols) in
    Obj.repr(
# 259 "parser.mly"
                                    ()
# 1098 "parser.ml"
               : 'symbol_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parser.mly"
          ()
# 1104 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'symbols) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 269 "parser.mly"
                                     (Hashtbl.add !tmp_symbol_tbl _2 _4)
# 1113 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 273 "parser.mly"
     (Const _1)
# 1120 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 274 "parser.mly"
     (Const (if _1 then 1 else 0))
# 1127 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 275 "parser.mly"
      (Vars _1)
# 1134 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 276 "parser.mly"
                   (Vars_index (_1, _3))
# 1142 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 285 "parser.mly"
                (_1)
# 1149 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 287 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in 
	     (if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	      else Const i))
# 1158 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 290 "parser.mly"
              (Negi _2)
# 1165 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 291 "parser.mly"
             (Negb _2)
# 1172 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 292 "parser.mly"
                   (Equal (_1, _3))
# 1180 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 293 "parser.mly"
                       (Negb (Equal (_1, _3)))
# 1188 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 294 "parser.mly"
                  (Ando (_1, _3))
# 1196 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 295 "parser.mly"
                  (Oro (_1, _3))
# 1204 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 296 "parser.mly"
                         (Add (_1, _3))
# 1212 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 297 "parser.mly"
                   (Minus (_1, _3))
# 1220 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 298 "parser.mly"
                  (Mult (_1, _3))
# 1228 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 299 "parser.mly"
                 (Mod (_1, _3))
# 1236 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 300 "parser.mly"
                (LT (_1, _3))
# 1244 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 301 "parser.mly"
                (GT (_1, _3))
# 1252 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 302 "parser.mly"
                (LE (_1, _3))
# 1260 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 303 "parser.mly"
                (GE (_1, _3))
# 1268 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 304 "parser.mly"
                        (_2)
# 1275 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 307 "parser.mly"
                       (Nested_vars (Vars _1, Vars _3))
# 1283 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 308 "parser.mly"
                          (Nested_vars (Vars_index (_1, _3), Vars _6))
# 1292 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 309 "parser.mly"
                          (Nested_vars (Vars _1, Vars_index (_3, _5)))
# 1301 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 310 "parser.mly"
                                       (Nested_vars (Vars_index (_1, _3), Vars_index (_6, _8)))
# 1311 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 311 "parser.mly"
                       (Nested_vars (Vars _1, _3))
# 1319 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 312 "parser.mly"
                                   (Nested_vars (Vars_index (_1, _3), _6))
# 1328 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inis) in
    Obj.repr(
# 317 "parser.mly"
  (tmp_init_assign := _3)
# 1335 "parser.ml"
               : 'init_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "parser.mly"
       ([])
# 1341 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 321 "parser.mly"
                                 ((Expr _3) :: _5)
# 1350 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exps) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 322 "parser.mly"
                                          ((Expr (Aray _4)) :: _7)
# 1359 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 323 "parser.mly"
                                          ((Expr (Aray [_4])) :: _7)
# 1368 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exps) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 324 "parser.mly"
                                             ((Module_instance (_3, _5)) :: _8)
# 1378 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 325 "parser.mly"
                                            ((Module_instance (_3, [_5])) :: _8)
# 1388 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 326 "parser.mly"
                                        ((Module_instance (_3, [])) :: _7)
# 1397 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 329 "parser.mly"
                    ([_1; _3])
# 1405 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 330 "parser.mly"
                  (_1 :: _3)
# 1413 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 335 "parser.mly"
     (Const _1)
# 1420 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 336 "parser.mly"
      (Const (if _1 then 1 else 0))
# 1427 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 337 "parser.mly"
                   (let i1 = position_in_state_var_list _1 !tmp_state_var_list in 
								if (i1 = -1) then
								begin
								print_endline ("state variable "^_1^" is not defined."); 
								exit 1;
								end;
								State_expr (i1, _3))
# 1441 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 344 "parser.mly"
                     (Negi _2)
# 1448 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 345 "parser.mly"
                    (Negb _2)
# 1455 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 346 "parser.mly"
                                (Equal (_1, _3))
# 1463 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 347 "parser.mly"
                                    (Negb (Equal (_1, _3)))
# 1471 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 348 "parser.mly"
                               (Ando (_1, _3))
# 1479 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 349 "parser.mly"
                              (Oro (_1, _3))
# 1487 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 350 "parser.mly"
                              (Add (_1, _3))
# 1495 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 351 "parser.mly"
                                (Minus (_1, _3))
# 1503 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 352 "parser.mly"
                               (Mult (_1, _3))
# 1511 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 353 "parser.mly"
                              (Mod (_1, _3))
# 1519 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 354 "parser.mly"
                             (LT (_1, _3))
# 1527 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 355 "parser.mly"
                             (GT (_1, _3))
# 1535 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 356 "parser.mly"
                             (LE (_1, _3))
# 1543 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 357 "parser.mly"
                             (GE (_1, _3))
# 1551 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'state_expr) in
    Obj.repr(
# 358 "parser.mly"
                       (_2)
# 1558 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 362 "parser.mly"
     (Const _1)
# 1565 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 363 "parser.mly"
     (Const (if _1 then 1 else 0))
# 1572 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 364 "parser.mly"
      (Vars _1)
# 1579 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 365 "parser.mly"
                  (Vars_index (_1, _3))
# 1587 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 366 "parser.mly"
               (_1)
# 1594 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 368 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in
	     if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	     else (Const i))
# 1603 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 371 "parser.mly"
              (Negi _2)
# 1610 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 372 "parser.mly"
             (Negb _2)
# 1617 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 373 "parser.mly"
                 (Equal (_1, _3))
# 1625 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 374 "parser.mly"
                     (Negb (Equal (_1, _3)))
# 1633 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 375 "parser.mly"
                (Ando (_1, _3))
# 1641 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 376 "parser.mly"
               (Oro (_1, _3))
# 1649 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 377 "parser.mly"
               (Add (_1, _3))
# 1657 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 378 "parser.mly"
                 (Minus (_1, _3))
# 1665 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 379 "parser.mly"
                (Mult (_1, _3))
# 1673 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 380 "parser.mly"
               (Mod (_1, _3))
# 1681 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 381 "parser.mly"
              (LT (_1, _3))
# 1689 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 382 "parser.mly"
              (GT (_1, _3))
# 1697 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 383 "parser.mly"
              (LE (_1, _3))
# 1705 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 384 "parser.mly"
              (GE (_1, _3))
# 1713 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 385 "parser.mly"
               (_2)
# 1720 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 388 "parser.mly"
                      (Nested_vars (Vars _1, Vars _3))
# 1728 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 389 "parser.mly"
                         (Nested_vars (Vars_index (_1, _3), Vars _6))
# 1737 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 390 "parser.mly"
                         (Nested_vars (Vars _1, Vars_index (_3, _5)))
# 1746 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 391 "parser.mly"
                                     (Nested_vars (Vars_index (_1, _3), Vars_index (_6, _8)))
# 1756 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 392 "parser.mly"
                      (Nested_vars (Vars _1, _3))
# 1764 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 393 "parser.mly"
                                 (Nested_vars (Vars_index (_1, _3), _6))
# 1773 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'trans) in
    Obj.repr(
# 398 "parser.mly"
  (tmp_transitions := _3)
# 1780 "parser.ml"
               : 'trans_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 401 "parser.mly"
        ([])
# 1786 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rests) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'trans) in
    Obj.repr(
# 402 "parser.mly"
                                           ((_1, _4) :: _7)
# 1795 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    Obj.repr(
# 405 "parser.mly"
        ([])
# 1801 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rests) in
    Obj.repr(
# 406 "parser.mly"
                                  ((Vars _1, _3) :: _5)
# 1810 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'rests) in
    Obj.repr(
# 407 "parser.mly"
                                              ((Vars_index (_1, _3), _6) :: _8)
# 1820 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fairness) in
    Obj.repr(
# 414 "parser.mly"
                                         (tmp_fairness := _3)
# 1827 "parser.ml"
               : 'fairness_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 417 "parser.mly"
          ([])
# 1833 "parser.ml"
               : 'fairness))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fairness) in
    Obj.repr(
# 419 "parser.mly"
                          (_1 :: _3)
# 1841 "parser.ml"
               : 'fairness))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atomics) in
    Obj.repr(
# 432 "parser.mly"
  (tmp_state_var_list := [])
# 1848 "parser.ml"
               : 'atomic_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 435 "parser.mly"
          ()
# 1854 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'atomics) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bound_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'state_expr) in
    Obj.repr(
# 437 "parser.mly"
     (Hashtbl.add !tmp_atomic_tbl _2 _7)
# 1864 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 440 "parser.mly"
                      (tmp_state_var_list := _1)
# 1871 "parser.ml"
               : 'bound_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "parser.mly"
             ([])
# 1877 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 444 "parser.mly"
      ([_1])
# 1884 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 445 "parser.mly"
                        (_1 :: _3)
# 1892 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    Obj.repr(
# 449 "parser.mly"
  (tmp_spec_list := _3)
# 1899 "parser.ml"
               : 'spec_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "parser.mly"
        ([])
# 1905 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'specs) in
    Obj.repr(
# 453 "parser.mly"
                                  ((_1, _3) :: _5)
# 1914 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "parser.mly"
          (Top)
# 1920 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "parser.mly"
          (Bottom)
# 1926 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atom_fml_para) in
    Obj.repr(
# 458 "parser.mly"
                            (Atomic (_1, _3))
# 1934 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 459 "parser.mly"
              (Atomic (_1, []))
# 1941 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 460 "parser.mly"
                 (Atomic (_1, [SVar _3]))
# 1949 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 461 "parser.mly"
           (Neg _2)
# 1956 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 462 "parser.mly"
               (And (_1, _3))
# 1964 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 463 "parser.mly"
              (Or (_1, _3))
# 1972 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 464 "parser.mly"
                                    (AX (SVar _3, _5, SVar _7))
# 1981 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 465 "parser.mly"
                                    (EX (SVar _3, _5, SVar _7))
# 1990 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 466 "parser.mly"
                                    (AF (SVar _3, _5, SVar _7))
# 1999 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 467 "parser.mly"
                                    (EG (SVar _3, _5, SVar _7))
# 2008 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 469 "parser.mly"
     (AR (SVar _3, SVar _5, _7, _9, SVar _11))
# 2019 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 471 "parser.mly"
     (EU (SVar _3, SVar _5, _7, _9, SVar _11))
# 2030 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fml) in
    Obj.repr(
# 472 "parser.mly"
                (_2)
# 2037 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 475 "parser.mly"
                            ([(SVar _1); (SVar _3)])
# 2045 "parser.ml"
               : 'atom_fml_para))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_fml_para) in
    Obj.repr(
# 476 "parser.mly"
                          ((SVar _1) :: _3)
# 2053 "parser.ml"
               : 'atom_fml_para))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (((string, Modul.modul0) Hashtbl.t) * Modul.modul0))
;;
# 480 "parser.mly"

# 2080 "parser.ml"
