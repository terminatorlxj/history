type token =
  | Module
  | Model
  | Var
  | Define
  | Init
  | Transition
  | Fairness
  | Atomic
  | Spec
  | Int
  | Bool
  | Top
  | Bottom
  | AX
  | EX
  | AF
  | EG
  | AR
  | EU
  | Neg
  | Colon
  | Semicolon
  | Comma
  | Dot
  | LB1
  | RB1
  | LB2
  | RB2
  | LB3
  | RB3
  | And
  | Or
  | Equal
  | Assigno
  | Add
  | Minus
  | Mult
  | DotDot
  | Scalar
  | Nego
  | Ando
  | Oro
  | Non_equal
  | Mod
  | LT
  | GT
  | LE
  | GE
  | File_end
  | Id of (string)
  | I of (int)
  | B of (bool)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Lexing
open Term
open Formula
open Modul

(********helper varaiables and functions for the parser*********)
let tmp_parameter_list = ref [] 
let tmp_var_list = ref []
let tmp_symbol_tbl = ref (Hashtbl.create 10)
let tmp_init_assign = ref [] 
let tmp_transitions = ref []
let tmp_fairness = ref []
let tmp_atomic_tbl = ref (Hashtbl.create 5)
let tmp_spec_list = ref []

let clear_tmps () = 
	tmp_parameter_list := [];
	tmp_var_list := [];
	tmp_symbol_tbl := Hashtbl.create 10;
	tmp_init_assign := [];
	tmp_transitions := [];
	tmp_fairness := [];
	tmp_atomic_tbl := Hashtbl.create 5;
	tmp_spec_list := []

let tmp_state_var_list = ref []

let module_tbl = Hashtbl.create 5
let modl = ref {name="";
		parameter_list=[];
		var_list=[];
		symbol_tbl=Hashtbl.create 0;
		init_assign=[];
		transitions=[];
		fairness=[];
		atomic_tbl=Hashtbl.create 0;
		spec_list=[];}

let position_in_var_list v vl = 
  let rec position_from_start v1 vl1 i = 
    match vl1 with
    | [] -> -1
    | (s, e) :: vl1' -> if v1 = s then i else position_from_start v1 vl1' (i+1)
  in position_from_start v vl 0

let position_in_state_var_list sv svl = 
  let rec position_from_start v vl i = 
    match vl with
    | [] -> -1
    | s :: vl' -> if v = s then i else position_from_start v vl' (i+1)
  in position_from_start sv svl 0

(*******tmp function*******)
let rec str_str_list sl = 
	match sl with
	| [] -> ""
	| [s] -> s
	| s :: sl' -> s^","^(str_str_list sl')

(**************************)


let rec find_scalar_position sc vtl = 
  let rec find_str_position s sl i = 
    match sl with
    | [] -> -1
    | s' :: sl' -> if s = s' then i else find_str_position s sl' (i+1) in 
  match vtl with
  | [] -> -1	
  | (s, Scalar_type sl) :: vtl' -> 
     let i1 = find_str_position sc sl 0 in 
     begin
		(*print_endline ("finding the position of "^sc^" in "^(str_str_list sl)^" and result is "^(string_of_int i1));*)
       if i1 = -1 then find_scalar_position sc vtl'
       else i1
     end
  | (s, et) :: vtl' -> find_scalar_position sc vtl'

let rec check_current_symbols stbl = 
  let tmp_s = ref "" in 
  let rec check_symbol s = 
    try
      match s with
      | Const i -> true
(*      | Parameter p -> true*)
      | Var v -> true
(*      | Symbol s1 -> Hashtbl.mem stbl s1*)
			| Vars s1 -> Hashtbl.mem stbl s1
      | Add (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negi e1 -> check_symbol e1
      | Minus (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Mult (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Negb e1 -> check_symbol e1
      | Ando (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Oro (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | Equal (e1, e2) -> (check_symbol e1) && (check_symbol e2)
      | _ -> false
    with
      Not_found -> false in
  Hashtbl.iter
    (fun a b -> if (!tmp_s = "") then (if not (check_symbol b) then tmp_s := a)) 
    stbl;
  !tmp_s
(***************************************************************)
let parse_error s = print_endline s
# 164 "parser.ml"
let yytransl_const = [|
  257 (* Module *);
  258 (* Model *);
  259 (* Var *);
  260 (* Define *);
  261 (* Init *);
  262 (* Transition *);
  263 (* Fairness *);
  264 (* Atomic *);
  265 (* Spec *);
  266 (* Int *);
  267 (* Bool *);
  268 (* Top *);
  269 (* Bottom *);
  270 (* AX *);
  271 (* EX *);
  272 (* AF *);
  273 (* EG *);
  274 (* AR *);
  275 (* EU *);
  276 (* Neg *);
  277 (* Colon *);
  278 (* Semicolon *);
  279 (* Comma *);
  280 (* Dot *);
  281 (* LB1 *);
  282 (* RB1 *);
  283 (* LB2 *);
  284 (* RB2 *);
  285 (* LB3 *);
  286 (* RB3 *);
  287 (* And *);
  288 (* Or *);
  289 (* Equal *);
  290 (* Assigno *);
  291 (* Add *);
  292 (* Minus *);
  293 (* Mult *);
  294 (* DotDot *);
  295 (* Scalar *);
  296 (* Nego *);
  297 (* Ando *);
  298 (* Oro *);
  299 (* Non_equal *);
  300 (* Mod *);
  301 (* LT *);
  302 (* GT *);
  303 (* LE *);
  304 (* GE *);
  305 (* File_end *);
    0|]

let yytransl_block = [|
  306 (* Id *);
  307 (* I *);
  308 (* B *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\003\000\011\000\011\000\011\000\011\000\012\000\
\012\000\012\000\004\000\013\000\013\000\013\000\007\000\015\000\
\015\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\017\000\017\000\
\017\000\017\000\017\000\017\000\005\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\019\000\019\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\021\000\021\000\021\000\021\000\021\000\
\021\000\006\000\022\000\022\000\023\000\023\000\023\000\010\000\
\024\000\024\000\008\000\026\000\026\000\027\000\028\000\028\000\
\028\000\009\000\029\000\029\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\030\000\030\000\000\000"

let yylen = "\002\000\
\002\000\000\000\011\000\012\000\013\000\014\000\014\000\015\000\
\000\000\003\000\005\000\005\000\001\000\003\000\001\000\000\000\
\002\000\004\000\004\000\000\000\005\000\008\000\004\000\000\000\
\005\000\001\000\001\000\001\000\004\000\001\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\006\000\009\000\003\000\006\000\004\000\000\000\005\000\007\000\
\007\000\008\000\008\000\007\000\003\000\003\000\004\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\001\000\
\001\000\004\000\001\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\006\000\009\000\003\000\
\006\000\004\000\000\000\007\000\000\000\005\000\008\000\004\000\
\000\000\003\000\004\000\000\000\008\000\001\000\000\000\001\000\
\003\000\004\000\000\000\005\000\001\000\001\000\004\000\003\000\
\004\000\002\000\003\000\003\000\008\000\008\000\008\000\008\000\
\012\000\012\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\142\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\012\000\018\000\000\000\
\019\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\079\000\080\000\000\000\083\000\
\000\000\004\000\116\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\000\086\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\106\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\027\000\000\000\030\000\000\000\000\000\000\000\000\000\
\099\000\000\000\104\000\000\000\000\000\087\000\000\000\000\000\
\000\000\000\000\000\000\088\000\094\000\095\000\096\000\097\000\
\098\000\115\000\000\000\125\000\126\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\006\000\000\000\000\000\000\000\000\000\
\031\000\033\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\000\000\000\000\112\000\000\000\
\000\000\000\000\000\000\122\000\008\000\000\000\046\000\000\000\
\051\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\035\000\041\000\042\000\043\000\044\000\045\000\000\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\118\000\000\000\000\000\000\000\
\000\000\000\000\000\000\139\000\128\000\000\000\000\000\114\000\
\131\000\000\000\000\000\022\000\000\000\000\000\057\000\056\000\
\060\000\000\000\000\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\000\127\000\000\000\000\000\000\000\059\000\
\058\000\000\000\000\000\000\000\108\000\121\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\141\000\124\000\
\000\000\000\000\052\000\000\000\000\000\110\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\117\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\000\000\066\000\
\000\000\000\000\000\000\000\000\000\000\067\000\073\000\074\000\
\075\000\076\000\077\000\133\000\134\000\135\000\136\000\000\000\
\000\000\000\000\111\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\137\000\138\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\030\000\039\000\050\000\040\000\065\000\
\086\000\087\000\022\000\027\000\046\000\079\000\058\000\131\000\
\132\000\060\000\134\000\067\001\080\000\081\000\204\000\167\000\
\168\000\115\000\252\000\253\000\170\000\007\001"

let yysindex = "\016\000\
\000\000\000\000\000\000\014\255\001\255\048\255\000\000\109\255\
\113\255\089\255\089\255\127\255\126\255\147\255\002\255\121\255\
\139\255\000\000\115\255\135\255\000\000\162\255\178\255\178\255\
\155\255\153\255\180\255\089\255\192\255\074\255\074\255\161\255\
\209\255\000\000\000\000\184\255\204\255\215\255\239\255\241\255\
\239\255\241\255\228\255\135\255\235\255\237\255\000\000\229\255\
\236\255\250\255\239\255\018\000\239\255\000\000\000\000\002\255\
\000\000\251\254\042\000\022\000\090\000\000\000\031\000\008\000\
\137\255\018\000\028\255\000\000\048\000\068\000\000\000\090\000\
\090\000\045\000\090\000\145\255\000\000\000\000\044\000\000\000\
\064\000\000\000\000\000\072\000\076\000\080\000\024\000\137\255\
\184\255\090\000\096\000\090\000\234\255\012\001\183\001\179\003\
\000\000\000\000\061\000\090\000\085\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\000\000\252\254\070\255\067\000\000\000\092\000\103\000\
\024\000\000\000\095\002\096\000\096\000\084\000\096\000\159\255\
\000\000\000\000\028\001\000\000\118\001\108\000\073\000\229\255\
\000\000\199\255\000\000\116\002\099\000\000\000\179\003\179\003\
\167\001\131\003\083\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\119\000\000\000\000\000\126\000\130\000\131\000\
\132\000\142\000\143\000\070\255\070\255\146\000\139\000\026\255\
\141\000\148\000\000\000\000\000\154\000\172\000\206\001\195\003\
\000\000\000\000\123\000\096\000\000\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\090\000\173\000\174\000\176\000\144\001\150\000\000\000\
\090\000\179\000\069\255\170\000\152\000\155\000\161\000\175\000\
\177\000\180\000\182\000\000\000\052\000\253\254\000\000\070\255\
\070\255\070\255\070\255\000\000\000\000\184\255\000\000\004\000\
\000\000\137\002\000\000\195\003\195\003\190\001\147\003\099\003\
\000\000\000\000\000\000\000\000\000\000\000\000\160\001\000\000\
\229\255\229\255\229\255\199\000\200\000\158\002\188\000\090\000\
\090\000\201\000\206\000\222\000\000\000\226\000\227\000\229\000\
\231\000\233\000\234\000\000\000\000\000\028\000\239\000\000\000\
\000\000\228\000\101\255\000\000\096\000\251\000\000\000\000\000\
\000\000\229\255\229\255\179\000\032\000\000\000\179\002\044\001\
\090\000\152\000\242\000\070\255\070\255\070\255\070\255\236\000\
\241\000\001\001\000\000\000\000\067\000\200\002\002\001\000\000\
\000\000\090\000\243\000\099\000\000\000\000\000\106\001\243\254\
\220\255\007\000\035\000\000\001\003\001\004\001\000\000\000\000\
\251\000\079\000\000\000\221\002\090\000\000\000\106\001\106\001\
\106\001\011\001\060\001\017\001\018\001\033\001\034\001\070\255\
\070\255\096\000\179\000\076\001\229\001\211\003\000\000\090\000\
\000\000\106\001\106\001\106\001\106\001\106\001\106\001\106\001\
\106\001\106\001\106\001\106\001\106\001\255\000\020\001\036\001\
\052\001\151\000\178\000\242\002\099\000\000\000\252\001\000\000\
\211\003\211\003\213\001\163\003\115\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\255\
\070\255\251\000\000\000\000\000\205\000\232\000\049\001\050\001\
\068\001\084\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\089\001\089\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\254\000\000\000\090\001\000\000\000\000\
\000\000\000\000\000\000\089\001\000\000\000\000\000\000\000\000\
\096\001\000\000\000\000\100\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\254\000\000\000\000\000\000\000\102\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\113\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\001\000\000\000\000\000\000\092\001\000\000\000\000\041\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\114\001\115\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\117\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\102\001\
\000\000\154\255\000\000\000\000\117\001\000\000\058\002\075\002\
\024\002\092\002\183\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\194\255\000\000\000\000\123\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\114\001\
\000\000\000\000\000\000\000\000\000\000\100\001\000\000\144\000\
\000\000\000\000\000\000\034\003\037\003\013\003\166\255\074\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\255\000\000\
\102\001\102\001\102\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\124\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\000\000\000\000\000\000\000\171\000\000\000\000\000\
\000\000\102\001\102\001\227\255\255\255\000\000\000\000\000\000\
\113\001\123\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\115\001\000\000\000\000\000\000\
\000\000\000\000\000\000\117\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\126\001\000\000\000\000\
\198\000\225\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\000\000\062\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\117\001\000\000\000\000\000\000\
\070\003\073\003\045\003\099\255\125\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\252\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\094\000\133\002\060\000\003\000\127\002\102\002\
\197\255\081\002\115\002\128\002\179\255\186\255\000\000\140\255\
\091\255\124\255\142\255\072\255\158\255\148\001\236\254\214\001\
\098\255\000\000\000\000\149\001\139\001\150\001"

let yytablesize = 1283
let yytable = "\094\000\
\139\000\095\000\096\000\200\000\098\000\212\000\213\000\175\000\
\176\000\068\001\178\000\122\000\018\000\225\000\005\000\006\000\
\001\000\217\000\218\000\123\000\199\000\133\000\005\001\062\001\
\068\000\154\000\019\000\119\000\120\000\140\000\020\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\150\000\
\151\000\152\000\153\000\052\000\069\000\155\000\006\001\216\000\
\061\000\089\000\008\000\021\000\061\000\063\000\090\000\066\000\
\217\000\218\000\009\001\010\001\011\001\173\000\007\000\226\000\
\198\000\227\000\228\000\229\000\230\000\231\000\232\000\233\000\
\234\000\235\000\236\000\237\000\238\000\037\000\038\000\240\000\
\123\001\156\000\157\000\158\000\159\000\160\000\161\000\162\000\
\163\000\164\000\041\000\081\000\081\000\081\000\165\000\248\000\
\081\000\009\000\081\000\051\000\081\000\053\000\249\000\081\000\
\014\000\081\000\081\000\081\000\015\001\016\001\017\001\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\166\000\
\068\000\035\000\037\001\239\000\068\000\048\001\049\001\050\001\
\051\001\059\001\246\000\217\000\218\000\010\000\077\001\078\001\
\079\001\011\000\012\000\068\000\068\000\040\001\041\001\084\000\
\012\001\085\000\069\000\015\000\022\001\023\000\069\000\016\000\
\038\001\104\001\105\001\106\001\107\001\108\001\109\001\110\001\
\111\001\112\001\113\001\114\001\115\001\025\000\069\000\024\000\
\099\000\098\001\099\001\100\000\017\000\026\000\100\000\100\000\
\100\000\023\001\024\001\100\000\029\000\100\000\179\000\100\000\
\028\000\180\000\100\000\036\000\100\000\100\000\100\000\036\000\
\032\000\036\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\033\000\090\000\090\000\090\000\036\000\036\000\
\090\000\034\000\090\000\043\000\090\000\100\001\082\000\082\000\
\082\000\125\001\126\001\082\000\036\000\082\000\099\000\082\000\
\090\000\201\000\082\000\060\001\082\000\082\000\082\000\044\000\
\047\000\045\000\082\000\082\000\082\000\082\000\082\000\082\000\
\082\000\082\000\069\001\048\000\049\000\038\000\076\001\102\000\
\102\000\102\000\217\000\218\000\102\000\054\000\102\000\056\000\
\102\000\099\000\135\000\102\000\100\000\102\000\102\000\102\000\
\061\000\103\001\057\000\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\101\000\101\000\101\000\059\000\062\000\
\101\000\064\000\101\000\179\000\101\000\070\001\013\001\101\000\
\085\000\101\000\101\000\101\000\083\000\217\000\218\000\101\000\
\101\000\101\000\101\000\101\000\101\000\101\000\101\000\103\000\
\103\000\103\000\034\001\071\000\103\000\035\001\103\000\099\000\
\103\000\071\001\042\001\103\000\082\000\103\000\103\000\103\000\
\101\000\217\000\218\000\103\000\103\000\103\000\103\000\103\000\
\103\000\103\000\103\000\070\000\102\000\004\001\103\000\104\000\
\105\000\091\000\217\000\218\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\072\000\114\000\097\000\037\000\
\092\000\072\000\197\000\037\000\116\000\037\000\179\000\073\000\
\117\000\074\001\074\000\075\000\073\000\118\000\138\000\074\000\
\075\000\141\000\072\000\037\000\169\000\093\000\077\000\078\000\
\124\000\171\000\076\000\077\000\078\000\073\000\132\000\132\000\
\074\000\075\000\132\000\125\000\172\000\177\000\126\000\127\000\
\132\000\196\000\028\000\076\000\077\000\078\000\028\000\205\000\
\028\000\128\000\129\000\130\000\203\000\028\000\206\000\028\000\
\028\000\028\000\207\000\208\000\209\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\047\000\210\000\211\000\
\215\000\047\000\214\000\047\000\224\000\120\001\219\000\245\000\
\047\000\220\000\047\000\047\000\047\000\217\000\218\000\221\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\029\000\222\000\241\000\242\000\029\000\243\000\029\000\250\000\
\121\001\251\000\247\000\029\000\254\000\029\000\029\000\029\000\
\217\000\218\000\255\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\049\000\018\001\019\001\025\001\049\000\
\000\001\049\000\001\001\127\001\026\001\002\001\049\000\003\001\
\049\000\049\000\049\000\217\000\218\000\021\001\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\048\000\027\001\
\028\001\029\001\048\000\030\001\048\000\031\001\128\001\032\001\
\033\001\048\000\217\000\048\000\048\000\048\000\217\000\218\000\
\036\001\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\050\000\039\001\047\001\061\001\050\000\072\001\050\000\
\116\001\073\001\034\001\016\000\050\000\052\001\050\000\050\000\
\050\000\136\000\053\001\080\001\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\102\000\117\001\103\000\104\000\
\105\000\181\000\054\001\058\001\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\182\000\118\001\183\000\184\000\
\185\000\044\001\094\001\095\001\186\000\187\000\188\000\189\000\
\190\000\191\000\192\000\193\000\102\000\119\001\103\000\104\000\
\105\000\081\001\096\001\097\001\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\082\001\131\001\083\001\084\001\
\085\001\101\001\129\001\130\001\086\001\087\001\088\001\089\001\
\090\001\091\001\092\001\093\001\102\000\132\001\103\000\104\000\
\105\000\081\000\009\000\010\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\081\000\017\000\081\000\081\000\
\081\000\020\000\063\001\054\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\194\000\064\001\107\000\113\000\
\123\000\065\001\109\000\195\000\119\000\120\000\102\000\140\000\
\103\000\104\000\105\000\066\001\031\000\042\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\194\000\088\000\
\121\000\244\000\067\000\055\000\045\001\008\001\046\001\056\001\
\102\000\000\000\103\000\104\000\105\000\000\000\194\000\055\001\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\102\000\000\000\103\000\104\000\105\000\000\000\000\000\102\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\137\000\108\000\109\000\110\000\111\000\112\000\113\000\102\000\
\000\000\103\000\104\000\105\000\000\000\000\000\182\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\223\000\
\188\000\189\000\190\000\191\000\192\000\193\000\182\000\000\000\
\183\000\184\000\185\000\000\000\000\000\082\001\186\000\187\000\
\188\000\189\000\190\000\191\000\192\000\193\000\102\001\088\001\
\089\001\090\001\091\001\092\001\093\001\082\001\000\000\083\001\
\084\001\085\001\000\000\000\000\000\000\086\001\087\001\088\001\
\089\001\090\001\091\001\092\001\093\001\124\001\000\000\000\000\
\000\000\000\000\000\000\000\000\102\000\000\000\103\000\104\000\
\105\000\000\000\000\000\000\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\093\000\093\000\093\000\000\000\
\000\000\093\000\000\000\093\000\000\000\093\000\000\000\000\000\
\000\000\000\000\093\000\093\000\093\000\085\000\085\000\085\000\
\093\000\093\000\085\000\000\000\085\000\000\000\085\000\000\000\
\000\000\000\000\000\000\085\000\085\000\000\000\091\000\091\000\
\091\000\085\000\085\000\091\000\000\000\091\000\000\000\091\000\
\000\000\000\000\000\000\000\000\091\000\091\000\000\000\092\000\
\092\000\092\000\091\000\091\000\092\000\000\000\092\000\000\000\
\092\000\000\000\000\000\000\000\000\000\092\000\092\000\000\000\
\089\000\089\000\089\000\092\000\092\000\089\000\000\000\089\000\
\000\000\089\000\174\000\000\000\000\000\000\000\000\000\102\000\
\000\000\103\000\104\000\105\000\089\000\089\000\000\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\202\000\
\000\000\000\000\000\000\000\000\102\000\000\000\103\000\104\000\
\105\000\000\000\000\000\000\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\014\001\000\000\000\000\000\000\
\000\000\182\000\000\000\183\000\184\000\185\000\000\000\000\000\
\000\000\186\000\187\000\188\000\189\000\190\000\191\000\192\000\
\193\000\020\001\000\000\000\000\000\000\000\000\102\000\000\000\
\103\000\104\000\105\000\000\000\000\000\000\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\043\001\000\000\
\000\000\000\000\000\000\102\000\000\000\103\000\104\000\105\000\
\000\000\000\000\000\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\057\001\000\000\000\000\000\000\000\000\
\182\000\000\000\183\000\184\000\185\000\000\000\000\000\000\000\
\186\000\187\000\188\000\189\000\190\000\191\000\192\000\193\000\
\075\001\000\000\000\000\000\000\000\000\102\000\000\000\103\000\
\104\000\105\000\000\000\000\000\000\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\122\001\000\000\000\000\
\000\000\000\000\182\000\000\000\183\000\184\000\185\000\000\000\
\000\000\000\000\186\000\187\000\188\000\189\000\190\000\191\000\
\192\000\193\000\040\000\000\000\000\000\032\000\040\000\000\000\
\040\000\032\000\000\000\032\000\000\000\000\000\000\000\040\000\
\040\000\040\000\032\000\032\000\000\000\040\000\040\000\038\000\
\032\000\032\000\039\000\038\000\000\000\038\000\039\000\000\000\
\039\000\000\000\072\000\000\000\038\000\038\000\072\000\039\000\
\039\000\000\000\038\000\038\000\000\000\039\000\039\000\072\000\
\072\000\072\000\000\000\064\000\000\000\072\000\072\000\064\000\
\000\000\000\000\000\000\070\000\000\000\000\000\071\000\070\000\
\064\000\064\000\071\000\000\000\000\000\000\000\064\000\064\000\
\070\000\070\000\000\000\071\000\071\000\000\000\070\000\070\000\
\000\000\071\000\071\000\102\000\000\000\103\000\104\000\105\000\
\000\000\000\000\000\000\106\000\000\000\108\000\109\000\110\000\
\111\000\112\000\113\000\182\000\000\000\183\000\184\000\185\000\
\000\000\000\000\000\000\186\000\000\000\188\000\189\000\190\000\
\191\000\192\000\193\000\082\001\000\000\083\001\084\001\085\001\
\000\000\000\000\000\000\086\001\000\000\088\001\089\001\090\001\
\091\001\092\001\093\001\102\000\000\000\103\000\104\000\105\000\
\000\000\000\000\000\000\000\000\000\000\108\000\109\000\110\000\
\111\000\112\000\113\000\182\000\000\000\183\000\184\000\185\000\
\000\000\000\000\000\000\000\000\000\000\188\000\189\000\190\000\
\191\000\192\000\193\000\082\001\000\000\083\001\084\001\085\001\
\000\000\000\000\000\000\000\000\000\000\088\001\089\001\090\001\
\091\001\092\001\093\001\102\000\000\000\000\000\000\000\105\000\
\000\000\000\000\000\000\000\000\000\000\108\000\109\000\110\000\
\111\000\112\000\113\000\182\000\000\000\000\000\000\000\185\000\
\000\000\000\000\000\000\000\000\000\000\188\000\189\000\190\000\
\191\000\192\000\193\000\082\001\000\000\000\000\000\000\085\001\
\000\000\000\000\000\000\000\000\000\000\088\001\089\001\090\001\
\091\001\092\001\093\001"

let yycheck = "\070\000\
\099\000\072\000\073\000\136\000\075\000\164\000\165\000\124\000\
\125\000\023\001\127\000\089\000\011\001\179\000\001\001\002\001\
\001\000\031\001\032\001\090\000\135\000\092\000\026\001\044\001\
\030\001\030\001\025\001\087\000\088\000\100\000\029\001\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\041\000\050\001\050\001\050\001\022\001\
\026\001\022\001\050\001\050\001\030\001\051\000\027\001\053\000\
\031\001\032\001\217\000\218\000\219\000\121\000\049\001\180\000\
\135\000\182\000\183\000\184\000\185\000\186\000\187\000\188\000\
\189\000\190\000\191\000\192\000\193\000\004\001\005\001\194\000\
\101\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\031\000\021\001\022\001\023\001\025\001\027\001\
\026\001\050\001\028\001\040\000\030\001\042\000\034\001\033\001\
\011\000\035\001\036\001\037\001\241\000\242\000\243\000\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\050\001\
\022\001\028\000\022\001\194\000\026\001\028\001\029\001\030\001\
\031\001\039\001\201\000\031\001\032\001\025\001\063\001\064\001\
\065\001\025\001\050\001\041\001\042\001\018\001\019\001\007\001\
\222\000\009\001\022\001\021\001\247\000\029\001\026\001\026\001\
\013\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\092\001\093\001\051\001\042\001\029\001\
\024\001\072\001\073\001\027\001\026\001\039\001\021\001\022\001\
\023\001\248\000\249\000\026\001\003\001\028\001\024\001\030\001\
\023\001\027\001\033\001\022\001\035\001\036\001\037\001\026\001\
\038\001\028\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\050\001\021\001\022\001\023\001\041\001\042\001\
\026\001\030\001\028\001\051\001\030\001\074\001\021\001\022\001\
\023\001\120\001\121\001\026\001\029\001\028\001\024\001\030\001\
\042\001\027\001\033\001\042\001\035\001\036\001\037\001\023\001\
\029\001\050\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\023\001\029\001\006\001\005\001\061\001\021\001\
\022\001\023\001\031\001\032\001\026\001\026\001\028\001\021\001\
\030\001\024\001\025\001\033\001\027\001\035\001\036\001\037\001\
\029\001\080\001\030\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\021\001\022\001\023\001\050\001\030\001\
\026\001\008\001\028\001\024\001\030\001\023\001\027\001\033\001\
\009\001\035\001\036\001\037\001\029\001\031\001\032\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\021\001\
\022\001\023\001\023\001\030\001\026\001\026\001\028\001\024\001\
\030\001\023\001\027\001\033\001\030\001\035\001\036\001\037\001\
\021\001\031\001\032\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\034\001\033\001\026\001\035\001\036\001\
\037\001\034\001\031\001\032\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\025\001\030\001\050\001\022\001\
\029\001\025\001\026\001\026\001\029\001\028\001\024\001\036\001\
\029\001\027\001\039\001\040\001\036\001\030\001\050\001\039\001\
\040\001\029\001\025\001\042\001\050\001\050\001\051\001\052\001\
\025\001\030\001\050\001\051\001\052\001\036\001\022\001\023\001\
\039\001\040\001\026\001\036\001\030\001\050\001\039\001\040\001\
\032\001\030\001\022\001\050\001\051\001\052\001\026\001\025\001\
\028\001\050\001\051\001\052\001\050\001\033\001\025\001\035\001\
\036\001\037\001\025\001\025\001\025\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\022\001\025\001\025\001\
\030\001\026\001\025\001\028\001\050\001\023\001\034\001\026\001\
\033\001\030\001\035\001\036\001\037\001\031\001\032\001\030\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\022\001\022\001\022\001\022\001\026\001\022\001\028\001\030\001\
\023\001\050\001\024\001\033\001\050\001\035\001\036\001\037\001\
\031\001\032\001\050\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\022\001\022\001\022\001\022\001\026\001\
\050\001\028\001\050\001\023\001\023\001\050\001\033\001\050\001\
\035\001\036\001\037\001\031\001\032\001\050\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\022\001\026\001\
\023\001\023\001\026\001\023\001\028\001\023\001\023\001\023\001\
\023\001\033\001\031\001\035\001\036\001\037\001\031\001\032\001\
\026\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\022\001\024\001\034\001\034\001\026\001\023\001\028\001\
\026\001\023\001\023\001\030\001\033\001\050\001\035\001\036\001\
\037\001\022\001\050\001\025\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\033\001\026\001\035\001\036\001\
\037\001\022\001\050\001\050\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\033\001\026\001\035\001\036\001\
\037\001\022\001\050\001\050\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\033\001\026\001\035\001\036\001\
\037\001\022\001\050\001\050\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\033\001\026\001\035\001\036\001\
\037\001\022\001\050\001\050\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\033\001\026\001\035\001\036\001\
\037\001\022\001\026\001\026\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\033\001\030\001\035\001\036\001\
\037\001\030\001\025\001\030\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\023\001\036\001\030\001\030\001\
\030\001\040\001\030\001\030\001\026\001\026\001\033\001\026\001\
\035\001\036\001\037\001\050\001\024\000\031\000\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\023\001\066\000\
\088\000\026\001\056\000\044\000\025\001\216\000\026\001\037\001\
\033\001\255\255\035\001\036\001\037\001\255\255\023\001\034\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\033\001\255\255\035\001\036\001\037\001\255\255\255\255\033\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\026\001\043\001\044\001\045\001\046\001\047\001\048\001\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\033\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\026\001\
\043\001\044\001\045\001\046\001\047\001\048\001\033\001\255\255\
\035\001\036\001\037\001\255\255\255\255\033\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\026\001\043\001\
\044\001\045\001\046\001\047\001\048\001\033\001\255\255\035\001\
\036\001\037\001\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\021\001\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\030\001\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\021\001\022\001\023\001\
\041\001\042\001\026\001\255\255\028\001\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\255\255\021\001\022\001\
\023\001\041\001\042\001\026\001\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\035\001\036\001\255\255\021\001\
\022\001\023\001\041\001\042\001\026\001\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\255\255\
\021\001\022\001\023\001\041\001\042\001\026\001\255\255\028\001\
\255\255\030\001\028\001\255\255\255\255\255\255\255\255\033\001\
\255\255\035\001\036\001\037\001\041\001\042\001\255\255\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\028\001\
\255\255\255\255\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\255\255\255\255\255\255\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\028\001\255\255\255\255\255\255\
\255\255\033\001\255\255\035\001\036\001\037\001\255\255\255\255\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\028\001\255\255\255\255\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\255\255\255\255\255\255\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\028\001\255\255\
\255\255\255\255\255\255\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\028\001\255\255\255\255\255\255\255\255\
\033\001\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\028\001\255\255\255\255\255\255\255\255\033\001\255\255\035\001\
\036\001\037\001\255\255\255\255\255\255\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\028\001\255\255\255\255\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\255\255\
\255\255\255\255\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\022\001\255\255\255\255\022\001\026\001\255\255\
\028\001\026\001\255\255\028\001\255\255\255\255\255\255\035\001\
\036\001\037\001\035\001\036\001\255\255\041\001\042\001\022\001\
\041\001\042\001\022\001\026\001\255\255\028\001\026\001\255\255\
\028\001\255\255\022\001\255\255\035\001\036\001\026\001\035\001\
\036\001\255\255\041\001\042\001\255\255\041\001\042\001\035\001\
\036\001\037\001\255\255\022\001\255\255\041\001\042\001\026\001\
\255\255\255\255\255\255\022\001\255\255\255\255\022\001\026\001\
\035\001\036\001\026\001\255\255\255\255\255\255\041\001\042\001\
\035\001\036\001\255\255\035\001\036\001\255\255\041\001\042\001\
\255\255\041\001\042\001\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\033\001\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001"

let yynames_const = "\
  Module\000\
  Model\000\
  Var\000\
  Define\000\
  Init\000\
  Transition\000\
  Fairness\000\
  Atomic\000\
  Spec\000\
  Int\000\
  Bool\000\
  Top\000\
  Bottom\000\
  AX\000\
  EX\000\
  AF\000\
  EG\000\
  AR\000\
  EU\000\
  Neg\000\
  Colon\000\
  Semicolon\000\
  Comma\000\
  Dot\000\
  LB1\000\
  RB1\000\
  LB2\000\
  RB2\000\
  LB3\000\
  RB3\000\
  And\000\
  Or\000\
  Equal\000\
  Assigno\000\
  Add\000\
  Minus\000\
  Mult\000\
  DotDot\000\
  Scalar\000\
  Nego\000\
  Ando\000\
  Oro\000\
  Non_equal\000\
  Mod\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  File_end\000\
  "

let yynames_block = "\
  Id\000\
  I\000\
  B\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inputs) in
    Obj.repr(
# 135 "parser.mly"
                       ((module_tbl, !modl))
# 820 "parser.ml"
               : (((string, Modul.modul0) Hashtbl.t) * Modul.modul0)))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                     ()
# 826 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 141 "parser.mly"
       (tmp_parameter_list := _5; 
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = Hashtbl.create 0;
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions; 
	   fairness = [];
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  };
	clear_tmps ())
# 850 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 11 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'trans_decl) in
    Obj.repr(
# 155 "parser.mly"
       (tmp_parameter_list := _5;
	Hashtbl.add module_tbl _3 
	  {name = _3;
	   parameter_list = !tmp_parameter_list;
	   var_list = !tmp_var_list;
	   symbol_tbl = !tmp_symbol_tbl; 
	   init_assign = !tmp_init_assign;
	   transitions = !tmp_transitions;
	   fairness = [];
	   atomic_tbl = !tmp_atomic_tbl;
	   spec_list = !tmp_spec_list
	  }; 
	clear_tmps ())
# 875 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 12 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 8 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 5 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 169 "parser.mly"
       (tmp_parameter_list := _5; 
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list;
		 symbol_tbl = Hashtbl.create 0;
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions;
		 fairness = [];
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 900 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'trans_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'atomic_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 182 "parser.mly"
       (tmp_parameter_list := _5;
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list; 
		 symbol_tbl = !tmp_symbol_tbl; 
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions; 
		 fairness = [];
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 926 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 13 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 9 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 5 : 'init_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 4 : 'trans_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'atomic_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 2 : 'fairness_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 195 "parser.mly"
       (tmp_parameter_list := _5; 
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list;
		 symbol_tbl = Hashtbl.create 0;
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions;
		 fairness = !tmp_fairness;
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 952 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 14 : 'inputs) in
    let _3 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 10 : 'parameters) in
    let _8 = (Parsing.peek_val __caml_parser_env 7 : 'var_decl) in
    let _9 = (Parsing.peek_val __caml_parser_env 6 : 'symbol_decl) in
    let _10 = (Parsing.peek_val __caml_parser_env 5 : 'init_decl) in
    let _11 = (Parsing.peek_val __caml_parser_env 4 : 'trans_decl) in
    let _12 = (Parsing.peek_val __caml_parser_env 3 : 'atomic_decl) in
    let _13 = (Parsing.peek_val __caml_parser_env 2 : 'fairness_decl) in
    let _14 = (Parsing.peek_val __caml_parser_env 1 : 'spec_decl) in
    Obj.repr(
# 208 "parser.mly"
       (tmp_parameter_list := _5;
	modl := {name = _3;
		 parameter_list = !tmp_parameter_list;
		 var_list = !tmp_var_list; 
		 symbol_tbl = !tmp_symbol_tbl; 
		 init_assign = !tmp_init_assign;
		 transitions = !tmp_transitions; 
		 fairness = !tmp_fairness;
		 atomic_tbl = !tmp_atomic_tbl;
		 spec_list = !tmp_spec_list
		}; (*Hashtbl.add module_tbl $3 !modl;*)
	clear_tmps ())
# 979 "parser.ml"
               : 'inputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "parser.mly"
                    ([])
# 985 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_type) in
    Obj.repr(
# 224 "parser.mly"
                        ([(_1, _3)])
# 993 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'parameters) in
    Obj.repr(
# 225 "parser.mly"
                                         ((_1, _3)::_5)
# 1002 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 229 "parser.mly"
                        (Int_type (_2, _4))
# 1010 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 230 "parser.mly"
          (Bool_type)
# 1016 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'scalars) in
    Obj.repr(
# 231 "parser.mly"
                     (Scalar_type _2)
# 1023 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 233 "parser.mly"
       (try
	  (let m = Hashtbl.find module_tbl _1 in (Module_type m.name))
	 with Not_found -> (print_endline ("module "^(_1)^" is not defined."); exit 1))
# 1032 "parser.ml"
               : 'expr_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 239 "parser.mly"
     ([])
# 1038 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 240 "parser.mly"
               ([_2])
# 1045 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'scalars) in
    Obj.repr(
# 241 "parser.mly"
                             (_2 :: _4)
# 1053 "parser.ml"
               : 'scalars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    Obj.repr(
# 244 "parser.mly"
                           (tmp_var_list := _3)
# 1060 "parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "parser.mly"
       ([])
# 1066 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 248 "parser.mly"
                                     ((_1, _3)::_5)
# 1075 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 249 "parser.mly"
                                                 ((_1, Array_type (_3, _5)) :: _8)
# 1085 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'symbols) in
    Obj.repr(
# 259 "parser.mly"
                                    ()
# 1092 "parser.ml"
               : 'symbol_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parser.mly"
          ()
# 1098 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'symbols) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 269 "parser.mly"
                                     (Hashtbl.add !tmp_symbol_tbl _2 _4)
# 1107 "parser.ml"
               : 'symbols))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 273 "parser.mly"
     (Const _1)
# 1114 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 274 "parser.mly"
     (Const (if _1 then 1 else 0))
# 1121 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 275 "parser.mly"
      (Vars _1)
# 1128 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 276 "parser.mly"
                   (Vars_index (_1, _3))
# 1136 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 285 "parser.mly"
                (_1)
# 1143 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 287 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in 
	     (if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	      else Const i))
# 1152 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 290 "parser.mly"
              (Negi _2)
# 1159 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 291 "parser.mly"
             (Negb _2)
# 1166 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 292 "parser.mly"
                   (Equal (_1, _3))
# 1174 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 293 "parser.mly"
                       (Negb (Equal (_1, _3)))
# 1182 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 294 "parser.mly"
                  (Ando (_1, _3))
# 1190 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 295 "parser.mly"
                  (Oro (_1, _3))
# 1198 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 296 "parser.mly"
                         (Add (_1, _3))
# 1206 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 297 "parser.mly"
                   (Minus (_1, _3))
# 1214 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 298 "parser.mly"
                  (Mult (_1, _3))
# 1222 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 299 "parser.mly"
                 (Mod (_1, _3))
# 1230 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 300 "parser.mly"
                (LT (_1, _3))
# 1238 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 301 "parser.mly"
                (GT (_1, _3))
# 1246 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 302 "parser.mly"
                (LE (_1, _3))
# 1254 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'dexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dexp) in
    Obj.repr(
# 303 "parser.mly"
                (GE (_1, _3))
# 1262 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 304 "parser.mly"
                        (_2)
# 1269 "parser.ml"
               : 'dexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 307 "parser.mly"
                       (Nested_vars (Vars _1, Vars _3))
# 1277 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 308 "parser.mly"
                          (Nested_vars (Vars_index (_1, _3), Vars _6))
# 1286 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 309 "parser.mly"
                          (Nested_vars (Vars _1, Vars_index (_3, _5)))
# 1295 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'dexp) in
    Obj.repr(
# 310 "parser.mly"
                                       (Nested_vars (Vars_index (_1, _3), Vars_index (_6, _8)))
# 1305 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 311 "parser.mly"
                       (Nested_vars (Vars _1, _3))
# 1313 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'dexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'dnested_var) in
    Obj.repr(
# 312 "parser.mly"
                                   (Nested_vars (Vars_index (_1, _3), _6))
# 1322 "parser.ml"
               : 'dnested_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inis) in
    Obj.repr(
# 317 "parser.mly"
  (tmp_init_assign := _3)
# 1329 "parser.ml"
               : 'init_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "parser.mly"
       ([])
# 1335 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 321 "parser.mly"
                                 ((Expr _3) :: _5)
# 1344 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exps) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 322 "parser.mly"
                                          ((Expr (Aray _4)) :: _7)
# 1353 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 323 "parser.mly"
                                          ((Expr (Aray [_4])) :: _7)
# 1362 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exps) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 324 "parser.mly"
                                             ((Module_instance (_3, _5)) :: _8)
# 1372 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 325 "parser.mly"
                                            ((Module_instance (_3, [_5])) :: _8)
# 1382 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'inis) in
    Obj.repr(
# 326 "parser.mly"
                                        ((Module_instance (_3, [])) :: _7)
# 1391 "parser.ml"
               : 'inis))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 329 "parser.mly"
                    ([_1; _3])
# 1399 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 330 "parser.mly"
                  (_1 :: _3)
# 1407 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 334 "parser.mly"
                           (let i1 = position_in_state_var_list _1 !tmp_state_var_list in 
								if (i1 = -1) then
								begin
								print_endline ("state variable "^_1^" is not defined."); 
								exit 1;
								end;
								State_expr (i1, _3))
# 1421 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 341 "parser.mly"
                     (Negi _2)
# 1428 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 342 "parser.mly"
                    (Negb _2)
# 1435 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 343 "parser.mly"
                                (Equal (_1, _3))
# 1443 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 344 "parser.mly"
                                    (Negb (Equal (_1, _3)))
# 1451 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 345 "parser.mly"
                               (Ando (_1, _3))
# 1459 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 346 "parser.mly"
                              (Oro (_1, _3))
# 1467 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 347 "parser.mly"
                              (Add (_1, _3))
# 1475 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 348 "parser.mly"
                                (Minus (_1, _3))
# 1483 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 349 "parser.mly"
                               (Mult (_1, _3))
# 1491 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 350 "parser.mly"
                              (Mod (_1, _3))
# 1499 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 351 "parser.mly"
                             (LT (_1, _3))
# 1507 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 352 "parser.mly"
                             (GT (_1, _3))
# 1515 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 353 "parser.mly"
                             (LE (_1, _3))
# 1523 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'state_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'state_expr) in
    Obj.repr(
# 354 "parser.mly"
                             (GE (_1, _3))
# 1531 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'state_expr) in
    Obj.repr(
# 355 "parser.mly"
                       (_2)
# 1538 "parser.ml"
               : 'state_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 359 "parser.mly"
     (Const _1)
# 1545 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 360 "parser.mly"
     (Const (if _1 then 1 else 0))
# 1552 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 361 "parser.mly"
      (Vars _1)
# 1559 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 362 "parser.mly"
                  (Vars_index (_1, _3))
# 1567 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 363 "parser.mly"
               (_1)
# 1574 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 365 "parser.mly"
     (let i = find_scalar_position _2 !tmp_var_list in
	     if i = -1 then (print_endline ("unknown type for "^_2); exit 1)
	     else (Const i))
# 1583 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 368 "parser.mly"
              (Negi _2)
# 1590 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 369 "parser.mly"
             (Negb _2)
# 1597 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 370 "parser.mly"
                 (Equal (_1, _3))
# 1605 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 371 "parser.mly"
                     (Negb (Equal (_1, _3)))
# 1613 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 372 "parser.mly"
                (Ando (_1, _3))
# 1621 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 373 "parser.mly"
               (Oro (_1, _3))
# 1629 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 374 "parser.mly"
               (Add (_1, _3))
# 1637 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 375 "parser.mly"
                 (Minus (_1, _3))
# 1645 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 376 "parser.mly"
                (Mult (_1, _3))
# 1653 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 377 "parser.mly"
               (Mod (_1, _3))
# 1661 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 378 "parser.mly"
              (LT (_1, _3))
# 1669 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 379 "parser.mly"
              (GT (_1, _3))
# 1677 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 380 "parser.mly"
              (LE (_1, _3))
# 1685 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 381 "parser.mly"
              (GE (_1, _3))
# 1693 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 382 "parser.mly"
               (_2)
# 1700 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 385 "parser.mly"
                      (Nested_vars (Vars _1, Vars _3))
# 1708 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 386 "parser.mly"
                         (Nested_vars (Vars_index (_1, _3), Vars _6))
# 1717 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 387 "parser.mly"
                         (Nested_vars (Vars _1, Vars_index (_3, _5)))
# 1726 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 388 "parser.mly"
                                     (Nested_vars (Vars_index (_1, _3), Vars_index (_6, _8)))
# 1736 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 389 "parser.mly"
                      (Nested_vars (Vars _1, _3))
# 1744 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nested_var) in
    Obj.repr(
# 390 "parser.mly"
                                 (Nested_vars (Vars_index (_1, _3), _6))
# 1753 "parser.ml"
               : 'nested_var))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'trans) in
    Obj.repr(
# 395 "parser.mly"
  (tmp_transitions := _3)
# 1760 "parser.ml"
               : 'trans_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 398 "parser.mly"
        ([])
# 1766 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'rests) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'trans) in
    Obj.repr(
# 399 "parser.mly"
                                           ((_1, _4) :: _7)
# 1775 "parser.ml"
               : 'trans))
; (fun __caml_parser_env ->
    Obj.repr(
# 402 "parser.mly"
        ([])
# 1781 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'rests) in
    Obj.repr(
# 403 "parser.mly"
                                  ((Vars _1, _3) :: _5)
# 1790 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'rests) in
    Obj.repr(
# 404 "parser.mly"
                                              ((Vars_index (_1, _3), _6) :: _8)
# 1800 "parser.ml"
               : 'rests))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fairness) in
    Obj.repr(
# 411 "parser.mly"
                                         (tmp_fairness := _3)
# 1807 "parser.ml"
               : 'fairness_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 414 "parser.mly"
          ([])
# 1813 "parser.ml"
               : 'fairness))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fairness) in
    Obj.repr(
# 416 "parser.mly"
                          (_1 :: _3)
# 1821 "parser.ml"
               : 'fairness))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atomics) in
    Obj.repr(
# 429 "parser.mly"
  (tmp_state_var_list := [])
# 1828 "parser.ml"
               : 'atomic_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 432 "parser.mly"
          ()
# 1834 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'atomics) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bound_var) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'state_expr) in
    Obj.repr(
# 434 "parser.mly"
     (Hashtbl.add !tmp_atomic_tbl _2 _7)
# 1844 "parser.ml"
               : 'atomics))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 437 "parser.mly"
                      (tmp_state_var_list := _1)
# 1851 "parser.ml"
               : 'bound_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 440 "parser.mly"
             ([])
# 1857 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 441 "parser.mly"
      ([_1])
# 1864 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bound_vars) in
    Obj.repr(
# 442 "parser.mly"
                        (_1 :: _3)
# 1872 "parser.ml"
               : 'bound_vars))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    Obj.repr(
# 446 "parser.mly"
  (tmp_spec_list := _3)
# 1879 "parser.ml"
               : 'spec_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 449 "parser.mly"
        ([])
# 1885 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'specs) in
    Obj.repr(
# 450 "parser.mly"
                                  ((_1, _3) :: _5)
# 1894 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    Obj.repr(
# 453 "parser.mly"
          (Top)
# 1900 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "parser.mly"
          (Bottom)
# 1906 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atom_fml_para) in
    Obj.repr(
# 455 "parser.mly"
                            (Atomic (_1, _3))
# 1914 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 456 "parser.mly"
              (Atomic (_1, []))
# 1921 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 457 "parser.mly"
                 (Atomic (_1, [SVar _3]))
# 1929 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 458 "parser.mly"
           (Neg _2)
# 1936 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 459 "parser.mly"
               (And (_1, _3))
# 1944 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fml) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fml) in
    Obj.repr(
# 460 "parser.mly"
              (Or (_1, _3))
# 1952 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 461 "parser.mly"
                                    (AX (SVar _3, _5, SVar _7))
# 1961 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 462 "parser.mly"
                                    (EX (SVar _3, _5, SVar _7))
# 1970 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 463 "parser.mly"
                                    (AF (SVar _3, _5, SVar _7))
# 1979 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 464 "parser.mly"
                                    (EG (SVar _3, _5, SVar _7))
# 1988 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 466 "parser.mly"
     (AR (SVar _3, SVar _5, _7, _9, SVar _11))
# 1999 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'fml) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'fml) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 468 "parser.mly"
     (EU (SVar _3, SVar _5, _7, _9, SVar _11))
# 2010 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fml) in
    Obj.repr(
# 469 "parser.mly"
                (_2)
# 2017 "parser.ml"
               : 'fml))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 472 "parser.mly"
                            ([(SVar _1); (SVar _3)])
# 2025 "parser.ml"
               : 'atom_fml_para))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_fml_para) in
    Obj.repr(
# 473 "parser.mly"
                          ((SVar _1) :: _3)
# 2033 "parser.ml"
               : 'atom_fml_para))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (((string, Modul.modul0) Hashtbl.t) * Modul.modul0))
;;
# 477 "parser.mly"

# 2060 "parser.ml"
