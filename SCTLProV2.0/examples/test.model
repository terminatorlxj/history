//import Dummy
(*datatype t1 = int*)
import Test_modul
datatype t2 = int
datatype t3 = {
        x : int;
        y : bool;
    }
value x = 10
value y = 20
value z = 4
value init = 1

function day_of_z (z) : int -> day = 
    match z with
    | 1 -> Monday
    | 2 -> Tuesday
    | 3 -> Wednesday
    | 4 -> Thursday
    | 5 -> Friday
    | 6 -> Saturday
    | _ -> Sunday

function is_sunday (d) : day -> bool= 
    d = Sunday

function is_int_sunday (i) : int -> bool = 
    match i with
    | 1 -> 
        let a = i;
        (is_sunday (day_of_z (a))) || (is_sunday (day_of_z (a+1)))
    | _ -> 
        let (a,b) = (i,2);
        is_sunday (day_of_z (a))

function fair1 (z) : int -> bool = 
    is_sunday (day_of_z (z))


Model Test() {
    Transition {
        next s := 
            s<7: s+1;
            s>=7: 1;
    }
//    fairness (fair1 s); AX(x, fair1 x, s)
    Atomic {
        atom_dummy (s) := is_int_sunday (s);
        atom_is_int_sunday (s) := is_int_sunday (s);
    }
    Spec { 
        dummy := atom_dummy (init);
        reach_sunday := AF (x, atom_is_int_sunday(x), init);
    }
}